{"version":3,"sources":["Components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Images","handleSearch","bind","handleSubmit","state","data","event","this","setState","value","target","preventDefault","url","getResult","props","fetch","response","json","jsonResults","results","result","map","photo","Container","className","Row","Col","onSubmit","onChange","placeholder","id","key","md","href","src","urls","small","user","name","description","created_at","likes","width","height","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAwFeA,E,YAhFb,aAAe,IAAD,8BACZ,+CACKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CAAEC,KAAM,IAJT,E,0EAODC,GACEC,KAAKC,SAAS,CAACC,MAAOH,EAAMI,OAAOD,QAChD,OAAOH,EAAMI,OAAOD,Q,mCAGTH,GACXA,EAAMK,iBACN,IACMC,EACF,2HAGAL,KAAKH,MAAMK,MACfF,KAAKM,UAAUD,K,yEAGDE,G,sFACRF,EAAME,E,SACWC,MAAMH,G,cAAvBI,E,gBACaA,EAASC,O,OAAtBA,E,OACAC,EAAcD,EAAKE,QACnBC,EAASF,EAAYG,KAAI,SAAAC,GAAK,OAAIA,KACxCf,KAAKC,SAAS,CAAEH,KAAMe,I,4QAIL,mEACL,8G,SACWL,MADX,+G,cACNC,E,gBACaA,EAASC,O,OAAtBA,E,OACAG,EAASH,EAAKI,KAAI,SAAAC,GAAK,OAAIA,KACjCf,KAAKC,SAAS,CAAEH,KAAMe,I,sIAItB,OAEE,kBAACG,EAAA,EAAD,CAAWC,UAAU,mBACnB,wBAAIA,UAAU,SAAd,sBACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0BAAMC,SAAUpB,KAAKJ,cACrB,2BAAOyB,SAAUrB,KAAKN,aAAc4B,YAAY,mBAAmBC,GAAG,gBACtE,4BAAQA,GAAG,gBAAX,aAMJ,kBAACL,EAAA,EAAD,KACGlB,KAAKH,MAAMC,KAAKgB,KAAI,SAACC,EAAOS,GAAR,OACnB,kBAACL,EAAA,EAAD,CAAKM,GAAI,EAAGD,IAAKA,EAAKP,UAAU,kBAC9B,uBAAGd,OAAO,SAASuB,KAAM,+BAAiCX,EAAMQ,IAC9D,yBAAKI,IAAKZ,EAAMa,KAAKC,QACrB,yBAAKZ,UAAU,mBAAmBM,GAAIC,GACpC,wBAAIP,UAAU,6BAA6BF,EAAMe,KAAKC,MACtD,2BAAIhB,EAAMiB,aACV,2BAAG,iDAAH,IAAmCjB,EAAMkB,YACzC,2BAAG,0CAAH,IAA4BlB,EAAMmB,OAClC,2BAAG,+CAAH,IAAiCnB,EAAMoB,MAAvC,MAAiDpB,EAAMqB,eAOjE,uBAAGnB,UAAU,eAAb,wC,GA3EaoB,aCSNC,E,iLANX,OACE,kBAAC,EAAD,U,GAJYD,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b4b8482.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass Images extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  handleSearch(event) {\r\n    var search = this.setState({value: event.target.value});\r\n    return event.target.value;\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const clientId = \"2a1120b968b317bb1d590468bfda81a6584cc506329f39222f2698a19d189ac0\";\r\n    const url = \r\n        \"https://api.unsplash.com/search/photos?client_id=\" +\r\n        clientId + \r\n        \"&query=\" + \r\n        this.state.value;\r\n    this.getResult(url);\r\n  }\r\n\r\n  async getResult(props) {\r\n    const url = props;\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    const jsonResults = json.results;\r\n    const result = jsonResults.map(photo => photo);\r\n    this.setState({ data: result });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const clientId = \"2a1120b968b317bb1d590468bfda81a6584cc506329f39222f2698a19d189ac0\";\r\n    const url = \"https://api.unsplash.com/photos/?client_id=\" + clientId;\r\n    const response = await fetch(url)\r\n    const json = await response.json();\r\n    const result = json.map(photo => photo)\r\n    this.setState({ data: result })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n\r\n      <Container className=\"container-fluid\">\r\n        <h1 className=\"title\">Good day Yummygum!</h1>\r\n        <Row>\r\n          <Col>\r\n            <form onSubmit={this.handleSubmit}>\r\n            <input onChange={this.handleSearch} placeholder=\"Search photos...\" id=\"searchInput\" ></input>\r\n            <button id=\"searchButton\">Search</button>\r\n            </form>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        <Row>\r\n          {this.state.data.map((photo, key) => (\r\n            <Col md={3} key={key} className=\"card_container\">\r\n              <a target=\"_blank\" href={\"https://unsplash.com/photos/\" + photo.id}>\r\n                <img src={photo.urls.small} />\r\n                <div className=\"card_description\" id={key} >\r\n                  <h1 className=\"card_description_username\">{photo.user.name}</h1>\r\n                  <p>{photo.description}</p>\r\n                  <p><strong>Publish date:</strong> {photo.created_at}</p>\r\n                  <p><strong>Likes:</strong> {photo.likes}</p>\r\n                  <p><strong>Dimensions:</strong> {photo.width} x {photo.height}</p>\r\n                </div>\r\n                </a>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n\r\n        <p className=\"footer_note\">That's it Yummygum ❤️</p>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Images;","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Images from './Components/Images';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Images />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}